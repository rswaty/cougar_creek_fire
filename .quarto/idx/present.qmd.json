{"title":"Present: Current Ecosystem Conditions","markdown":{"yaml":{"title":"Present: Current Ecosystem Conditions"},"headingText":"Read the shapefile from the \"inputs/\" directory","containsRefs":false,"markdown":"\n\n```{r process data,  include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n\nlibrary(foreign)\nlibrary(raster)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\n\nlandscape_name <- \"Cougar Creek\"\n\n\nshp <- st_read(\"inputs/cougar_creek_coarse.shp\") %>% \n  # Transform the coordinate reference system to EPSG:5070\n  st_transform(crs = 5070) %>%\n  # Union all geometries into a single geometry\n  st_union() %>%\n  # Convert the result back to an sf object\n  st_sf()\n\n# EVT -----------------------------\n\n# Load and process the raster data\nevt_aoi <- rast(\"inputs/LF2023_EVT_240_CONUS/LC23_EVT_240.tif\") %>%  # Load the raster file\n  crop(shp) %>%  # Crop the raster to the extent of the shapefile 'shp'\n  mask(shp)  # Mask the raster using the shapefile 'shp'\n\n# Load the CSV file containing attributes for the EVT data\nevt_conus_atts <- read.csv(\"inputs/LF2023_EVT_240_CONUS/LF23_EVT_240.csv\")  # Read the CSV file into a dataframe\n\n# Assign the attribute table to the raster levels\nlevels(evt_aoi)[[1]] <- evt_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evt_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevt_aoi_atts <- values(evt_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evt_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evt_aoi, \"outputs/evt_aoi.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evt_aoi_atts, \"outputs/evt_aoi.tif.vat.dbf\")\n\n# Write the attribute table to a CSV file\nwrite.csv(evt_aoi_atts, \"outputs/evt_aoi_attributes.csv\")\n\n\n# Create a color file for use in QGIS\nEVTColorFile <- evt_aoi_atts %>%\n  subset(EVT_NAME != \"Open Water\" & EVT_NAME != \"Barren-Rock/Sand/Clay\") %>%  # Exclude specific EVT names\n  top_n(n = 10, wt = REL_PERCENT) %>%  # Select the top 10 entries based on relative percentage\n  add_column(z = 255) %>%  # Add a new column 'z' with a constant value of 255\n  dplyr::select(VALUE,  # Select specific columns for the output\n                R,\n                G,\n                B,\n                z,\n                EVT_NAME)\n\n# Write the color file to a text file\nwrite.table(EVTColorFile, file = \"outputs/EVTColorFile.txt\", sep = \",\",  # Specify the file path and separator\n            row.names = FALSE, col.names = FALSE, quote = FALSE)  # Exclude row and column names, and disable quoting\n\n# EVC -----------------------------\n\n\nevc_aoi <- rast(\"inputs/LF2023_EVC_240_CONUS/LC23_EVC_240.tif\") %>%\n  crop(shp) %>%\n  mask(shp)\n\n\nevc_conus_atts <- read.csv(\"inputs/LF22_EVC_230_acc.csv\")\n\n# Load the CSV file containing attributes for the EVC data\nevc_conus_atts <- read.csv(\"inputs/LF22_EVC_230_acc.csv\")\n\n# Assign the attribute table to the raster levels\nlevels(evc_aoi)[[1]] <- evc_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evc_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevc_aoi_atts <- values(evc_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evc_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evc_aoi, \"outputs/evc_aoi2.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evc_aoi_atts, \"outputs/evc_aoi.tif.vat.dbf\")\n\n## write csv for fun\nwrite.csv(evc_aoi_atts, \"outputs/evc_aoi_attributes.csv\")\n\n## EVC color file for use in QGIS\nEVCColorFile <- evc_aoi_atts    %>%\n      add_column(z = 255)     %>%\n      dplyr::select(VALUE,\n                    R,\n                    G,\n                    B,\n                    z,\n                    CLASSNAMES) \n    \n    \nwrite.table(EVCColorFile, file = \"outputs/EVCColorFile.txt\", sep = \",\",\n                row.names = FALSE, col.names = FALSE, quote = FALSE)\n\n\n# EVH ---------------------------------\n\nevh_aoi <- terra::rast(\"inputs/LF2023_EVH_240_CONUS/LC23_EVH_240.tif\") %>%\n  crop(shp) %>%\n  mask(shp)\n\n\nevh_conus_atts <- read.csv(\"inputs/LF22_EVH_230_acc.csv\")\n\n\n# Assign the attribute table to the raster levels\nlevels(evh_aoi)[[1]] <- evh_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evh_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevh_aoi_atts <- values(evh_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evh_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evh_aoi, \"outputs/evh_aoi.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evh_aoi_atts, \"outputs/evh_aoi.tif.vat.dbf\")\n\n## write csv for fun\nwrite.csv(evh_aoi_atts, \"outputs/evh_aoi_attributes.csv\")\n\nEVHColorFile <- evh_aoi_atts    %>%\n      add_column(z = 255)     %>%\n      dplyr::select(VALUE,\n                    R,\n                    G,\n                    B,\n                    z,\n                    CLASSNAMES) \n    \n    \nwrite.table(EVHColorFile, file = \"outputs/EVHColorFile.txt\", sep = \",\",\n                row.names = FALSE, col.names = FALSE, quote = FALSE)\n\n\n```\n\nLANDFIRE's [Existing Vegetation Type, Cover and Height](https://landfire.gov/vegetation.php){target=\"blank\"} datasets describe vegetation conditions.\n\n-   Existing Vegetation Type (EVT) - represents the current distribution of the terrestrial ecological systems classification, developed by NatureServe for the western hemisphere, through 2016.\n-   Existing Vegetation Cover (EVC) - represents the vertically projected percent cover of the live canopy layer for a 30-m cell.\n-   Existing Vegetation Height (EVH) - represents the average height of the dominant vegetation for a 30-m cell.\n\n[Read more about LANDFIRE Vegetation Products](https://landfire.gov/vegetation.php){target=\"blank\"}\n\n\n\n## Most Prevalent Existing Vegetation Types\n\n<br>\n\n![](outputs/evt.jpg){width=\"100%\"}\n\n<br>\n\n## Most Prevalent Existing Vegetation Types\n\n```{r evt chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\nlibrary(tidyverse)\nevtname <- read.csv(file = \"outputs/evt_aoi_attributes.csv\") %>%\n  group_by(EVT_NAME) %>%\n  summarize(ACRES = sum(ACRES),\n            REL_PERCENT = sum(REL_PERCENT)) %>%\n  arrange(desc(REL_PERCENT)) %>%\n  filter(!EVT_NAME %in% c(\"Open Water\",\"Developed-Roads\")) %>% \n  top_n(n = 10, wt = REL_PERCENT)\n\n# plot\nevtChart <-\n  ggplot(data = evtname, aes(x = EVT_NAME, y = REL_PERCENT)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Top 10 Existing Vegetation Types\",\n    caption = \"Data from landfire.gov\",\n    x = \"\",\n    y = \"Percent of landscape\") +\n  scale_x_discrete(limits = rev(evtname$EVT_NAME),\n                   labels = function(x) str_wrap(x, width = 18)) +\n  coord_flip() +\n  theme_bw(base_size = 14)\n\n\n\nevtChart\n```\n\n<br>\n\n## Existing Vegetation Cover\n\nThe Existing Vegetation Cover (EVC) map is a visual representation of EVC classifications across the subregion. The chart below the map provides a breakdown of each vegetation cover classification and their relative distribution across the forest.\n\n![](outputs/evc.jpg){width=\"100%\"} <br> <br>\n\n```{r evc chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\n\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Create \"type\" column based on conditions\nevcname <- evc_aoi_atts %>% \n  mutate(type = case_when(\n    VALUE %in% 11 ~ \"Open Water\",\n    VALUE %in% 12 ~ \"Snow / Ice\",\n    VALUE %in% 13:25 ~ \"Developed\",\n    VALUE %in% 31 ~ \"Barren\",\n    VALUE %in% 60:70 ~ \"Agriculture\",\n    VALUE %in% 32 ~ \"Quarries\",\n    VALUE %in% 100 ~ \"Sparse Vegetation\",\n    VALUE %in% 101:199 ~ \"Tree\",\n    VALUE %in% 201:299 ~ \"Shrub\",\n    VALUE %in% 301:399 ~ \"Herb\",\n    TRUE ~ \"Other\"\n  ))\n\n# Create reverse substr() function\nrevSubstr <- function(x, start, stop) {\n  x <- strsplit(x, \"\")\n  sapply(x, function(x) paste(rev(rev(x)[start:stop]), collapse = \"\"), USE.NAMES = FALSE)\n}\n\n# Create cover column based on 2nd and 3rd to last VALUEs of CLASSNAMES\n# If \"Other\" type, make 0\nevcname <- evcname %>% \n  mutate(cover = as.numeric(if_else(VALUE > 100,\n                                    revSubstr(evcname$CLASSNAMES, start = 2, stop = 3),\n                                    \"0\")))\n\n# Create bin breaks for grouping\nbreaks <- seq(0, 100, 10)\n\n# Create intervals for grouping and summarize\n# Also create factor order for \"type\"\nevcgroup <- evcname %>%\n  mutate(interval = cut(cover, breaks, include.lowest = TRUE, right = TRUE,\n                        labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60-69\", \n                                   \"70-79\", \"80-89\", \"90-100\")),\n         type = factor(type, levels = c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\", \"Snow / Ice\", \n                                        \"Developed\", \"Agriculture\", \"Sparse Vegetation\", \n                                        \"Barren\", \"Quarries\", \"Other\"))) %>%\n  group_by(type, interval) %>%\n  summarize(COUNT = sum(Freq),\n            acres = sum(ACRES),\n            rel_percent = sum(REL_PERCENT))\n\n# Add label and legend names based on condition\nevcgroup <- evcgroup %>% \n  mutate(label = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\"),\n                         paste0(type, \" Cover = \", interval, \"%\"), as.character(type)),\n         legend = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\"),\n                          type, as.factor(\"Other\")))\n\n# Turn current label order to factors\nevclabel.list <- evcgroup$label\nevcgroup <- evcgroup %>% \n  mutate(label = fct_rev(factor(label, evclabel.list)))\n\n# Join in custom cols column to color bars by specific label\nevc_group_cols <- read.csv(\"inputs/evc_group_acc.csv\")\nevcgroup <- left_join(evcgroup, evc_group_cols, by = \"label\")\n\n# Reorder labels\nevcgroup$label <- factor(evcgroup$label, levels = rev(evcgroup$label))\n\n# Filter out low relative percentages\nevcgroup <- evcgroup %>%\n  filter(rel_percent > 0.01)\n\n# Plot\nevcChart <- ggplot(data = evcgroup, aes(x = label, y = rel_percent, fill = colors)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Existing Vegetation Cover\",\n    caption = \"Data from landfire.gov\",\n    x = \"Amount of landscape\",\n    y = \"Most dominant lifeform\"\n  ) +\n  scale_fill_identity() +\n  coord_flip() +\n  theme_classic(base_size = 12) +\n  theme(legend.position = \"none\")\n\n# Display the plot\nprint(evcChart)\n\n```\n\n<br>\n\n## Existing Vegetation Height\n\nThe Existing Vegetation Height (EVH) map showcases EVH across the forest. The chart below the map provides the percentage of the landscape represented by each EVH height.\n\n![](outputs/evh.jpg){width=\"100%\"} <br>\n\n```{r evh chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\n\n# Create a new dataframe 'evhname' with additional columns 'type' and 'height_m'\nevhname <- evh_aoi_atts %>% \n  mutate(\n    type = case_when(\n      VALUE %in% 11 ~ \"Open Water\",\n      VALUE %in% 12 ~ \"Snow / Ice\",\n      VALUE %in% 13:25 ~ \"Developed\",\n      VALUE %in% 31 ~ \"Barren\",\n      VALUE %in% 60:70 ~ \"Agriculture\",\n      VALUE %in% 32 ~ \"Quarries\",\n      VALUE %in% 100 ~ \"Sparse Vegetation\",\n      VALUE %in% 101:199 ~ \"Tree\",\n      VALUE %in% 201:299 ~ \"Shrub\",\n      VALUE %in% 301:399 ~ \"Herb\",\n      TRUE ~ \"Other\"\n    ),\n    height_m = case_when(\n      type == \"Tree\" ~ VALUE - 100,\n      type == \"Shrub\" ~ (VALUE - 200) / 10,\n      type == \"Herb\" ~ (VALUE - 300) / 10,\n      TRUE ~ 0\n    ) %>% as.character() %>% as.numeric()\n  )\n\n# Define bin breaks for grouping\nbreaks <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100)\n\n# Create intervals for grouping and summarize data\nevhgroup <- evhname %>%\n  mutate(\n    interval = cut(height_m, breaks, include.lowest = TRUE, right = FALSE,\n                   labels = c(\"0\", \"0.1-0.2\", \"0.2-0.3\", \"0.3-0.4\", \"0.4-0.5\", \"0.5-0.6\", \"0.6-0.7\", \"0.7-0.8\", \"0.8-0.9\", \"0.9-1.0\", \"1-5\", \"5-10\", \"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\", \"35-40\", \"40-45\", \"45-50\", \"50-55\", \"55-60\", \"60-65\", \"65-70\", \"70-75\", \"75-80\", \"80-85\", \"85-90\", \"90-95\", \"95-100\")),\n    type = factor(type, levels = c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\", \"Snow / Ice\", \"Developed\", \"Agriculture\", \"Sparse Vegetation\", \"Barren\", \"Quarries\", \"Other\"))\n  ) %>%\n  group_by(type, interval) %>%\n  summarise(\n    COUNT = sum(Freq),\n    acres = sum(ACRES),\n    rel_percent = sum(REL_PERCENT)\n  )\n\n# Add label and legend names based on condition\nevhgroup <- evhgroup %>%\n  mutate(\n    label = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\"),\n                    paste0(type, \" Height = \", interval, \" m\"), as.character(type)),\n    legend = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\"),\n                     type, as.factor(\"Other\"))\n  )\n\n# Turn current label order to factors\nevhlabel.list <- evhgroup$label\nevhgroup <- evhgroup %>%\n  mutate(label = fct_rev(factor(label, evhlabel.list)))\n\n# Join in custom columns to color bars by specific label\nevh_group_cols <- read.csv(\"inputs/evh_group_acc.csv\")\nevhgroup <- left_join(evhgroup, evh_group_cols, by = \"label\")\n\n# Reorder labels\nevhgroup$label <- factor(evhgroup$label, levels = rev(evhgroup$label))\n\n# Filter out rows with relative percentage less than 0.01\nevhgroup <- evhgroup %>%\n  filter(rel_percent > 0.01)\n\n# Plot the data\nevhChart <- ggplot(data = evhgroup, aes(x = label, y = rel_percent, fill = colors)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Existing Vegetation Height\",\n    subtitle = landscape_name,\n    caption = \"\\nData from landfire.gov.\",\n    x = \"\",\n    y = \"Percent of landscape\"\n  ) +\n  scale_fill_identity() +\n  coord_flip() +\n  theme_bw()\n\n# Display the plot\nevhChart\n```\n","srcMarkdownNoYaml":"\n\n```{r process data,  include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n\nlibrary(foreign)\nlibrary(raster)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\n\nlandscape_name <- \"Cougar Creek\"\n\n\n# Read the shapefile from the \"inputs/\" directory\nshp <- st_read(\"inputs/cougar_creek_coarse.shp\") %>% \n  # Transform the coordinate reference system to EPSG:5070\n  st_transform(crs = 5070) %>%\n  # Union all geometries into a single geometry\n  st_union() %>%\n  # Convert the result back to an sf object\n  st_sf()\n\n# EVT -----------------------------\n\n# Load and process the raster data\nevt_aoi <- rast(\"inputs/LF2023_EVT_240_CONUS/LC23_EVT_240.tif\") %>%  # Load the raster file\n  crop(shp) %>%  # Crop the raster to the extent of the shapefile 'shp'\n  mask(shp)  # Mask the raster using the shapefile 'shp'\n\n# Load the CSV file containing attributes for the EVT data\nevt_conus_atts <- read.csv(\"inputs/LF2023_EVT_240_CONUS/LF23_EVT_240.csv\")  # Read the CSV file into a dataframe\n\n# Assign the attribute table to the raster levels\nlevels(evt_aoi)[[1]] <- evt_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evt_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevt_aoi_atts <- values(evt_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evt_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evt_aoi, \"outputs/evt_aoi.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evt_aoi_atts, \"outputs/evt_aoi.tif.vat.dbf\")\n\n# Write the attribute table to a CSV file\nwrite.csv(evt_aoi_atts, \"outputs/evt_aoi_attributes.csv\")\n\n\n# Create a color file for use in QGIS\nEVTColorFile <- evt_aoi_atts %>%\n  subset(EVT_NAME != \"Open Water\" & EVT_NAME != \"Barren-Rock/Sand/Clay\") %>%  # Exclude specific EVT names\n  top_n(n = 10, wt = REL_PERCENT) %>%  # Select the top 10 entries based on relative percentage\n  add_column(z = 255) %>%  # Add a new column 'z' with a constant value of 255\n  dplyr::select(VALUE,  # Select specific columns for the output\n                R,\n                G,\n                B,\n                z,\n                EVT_NAME)\n\n# Write the color file to a text file\nwrite.table(EVTColorFile, file = \"outputs/EVTColorFile.txt\", sep = \",\",  # Specify the file path and separator\n            row.names = FALSE, col.names = FALSE, quote = FALSE)  # Exclude row and column names, and disable quoting\n\n# EVC -----------------------------\n\n\nevc_aoi <- rast(\"inputs/LF2023_EVC_240_CONUS/LC23_EVC_240.tif\") %>%\n  crop(shp) %>%\n  mask(shp)\n\n\nevc_conus_atts <- read.csv(\"inputs/LF22_EVC_230_acc.csv\")\n\n# Load the CSV file containing attributes for the EVC data\nevc_conus_atts <- read.csv(\"inputs/LF22_EVC_230_acc.csv\")\n\n# Assign the attribute table to the raster levels\nlevels(evc_aoi)[[1]] <- evc_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evc_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevc_aoi_atts <- values(evc_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evc_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evc_aoi, \"outputs/evc_aoi2.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evc_aoi_atts, \"outputs/evc_aoi.tif.vat.dbf\")\n\n## write csv for fun\nwrite.csv(evc_aoi_atts, \"outputs/evc_aoi_attributes.csv\")\n\n## EVC color file for use in QGIS\nEVCColorFile <- evc_aoi_atts    %>%\n      add_column(z = 255)     %>%\n      dplyr::select(VALUE,\n                    R,\n                    G,\n                    B,\n                    z,\n                    CLASSNAMES) \n    \n    \nwrite.table(EVCColorFile, file = \"outputs/EVCColorFile.txt\", sep = \",\",\n                row.names = FALSE, col.names = FALSE, quote = FALSE)\n\n\n# EVH ---------------------------------\n\nevh_aoi <- terra::rast(\"inputs/LF2023_EVH_240_CONUS/LC23_EVH_240.tif\") %>%\n  crop(shp) %>%\n  mask(shp)\n\n\nevh_conus_atts <- read.csv(\"inputs/LF22_EVH_230_acc.csv\")\n\n\n# Assign the attribute table to the raster levels\nlevels(evh_aoi)[[1]] <- evh_conus_atts\n\n# Set the active category for the raster to \"VALUE\"\nactiveCat(evh_aoi) <- \"VALUE\"\n\n# Extract values from the raster, convert to a dataframe, and process\nevh_aoi_atts <- values(evh_aoi, dataframe = TRUE, na.rm = TRUE) %>%  # Extract values from the raster as a dataframe, removing NA values\n  table(dnn = \"VALUE\") %>%  # Create a frequency table of the values\n  as.data.frame() %>%  # Convert the table to a dataframe\n  mutate_all(as.character) %>%  # Convert all columns to character type\n  mutate_all(as.integer) %>%  # Convert all columns to integer type\n  left_join(cats(evh_aoi)[[1]], by = \"VALUE\") %>%  # Join with the raster categories by \"VALUE\"\n  filter(Freq != 0) %>%  # Filter out rows with a frequency of 0\n  mutate(ACRES = round((Freq * 900 / 4046.86), 0),  # Calculate acres and round to the nearest integer\n         REL_PERCENT = round((Freq / sum(Freq)), 3) * 100)  # Calculate relative percentage and round to 3 decimal places\n\n# Write the processed raster to a file\nwriteRaster(evh_aoi, \"outputs/evh_aoi.tif\",\n            gdal = c(\"COMPRESS=NONE\", \"TFW=YES\"),  # Specify GDAL options\n            datatype = \"INT2S\",  # Set the data type to signed 16-bit integer\n            overwrite = TRUE)  # Allow overwriting of existing files\n\n# Write the attribute table to a DBF file\nwrite.dbf(evh_aoi_atts, \"outputs/evh_aoi.tif.vat.dbf\")\n\n## write csv for fun\nwrite.csv(evh_aoi_atts, \"outputs/evh_aoi_attributes.csv\")\n\nEVHColorFile <- evh_aoi_atts    %>%\n      add_column(z = 255)     %>%\n      dplyr::select(VALUE,\n                    R,\n                    G,\n                    B,\n                    z,\n                    CLASSNAMES) \n    \n    \nwrite.table(EVHColorFile, file = \"outputs/EVHColorFile.txt\", sep = \",\",\n                row.names = FALSE, col.names = FALSE, quote = FALSE)\n\n\n```\n\nLANDFIRE's [Existing Vegetation Type, Cover and Height](https://landfire.gov/vegetation.php){target=\"blank\"} datasets describe vegetation conditions.\n\n-   Existing Vegetation Type (EVT) - represents the current distribution of the terrestrial ecological systems classification, developed by NatureServe for the western hemisphere, through 2016.\n-   Existing Vegetation Cover (EVC) - represents the vertically projected percent cover of the live canopy layer for a 30-m cell.\n-   Existing Vegetation Height (EVH) - represents the average height of the dominant vegetation for a 30-m cell.\n\n[Read more about LANDFIRE Vegetation Products](https://landfire.gov/vegetation.php){target=\"blank\"}\n\n\n\n## Most Prevalent Existing Vegetation Types\n\n<br>\n\n![](outputs/evt.jpg){width=\"100%\"}\n\n<br>\n\n## Most Prevalent Existing Vegetation Types\n\n```{r evt chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\nlibrary(tidyverse)\nevtname <- read.csv(file = \"outputs/evt_aoi_attributes.csv\") %>%\n  group_by(EVT_NAME) %>%\n  summarize(ACRES = sum(ACRES),\n            REL_PERCENT = sum(REL_PERCENT)) %>%\n  arrange(desc(REL_PERCENT)) %>%\n  filter(!EVT_NAME %in% c(\"Open Water\",\"Developed-Roads\")) %>% \n  top_n(n = 10, wt = REL_PERCENT)\n\n# plot\nevtChart <-\n  ggplot(data = evtname, aes(x = EVT_NAME, y = REL_PERCENT)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Top 10 Existing Vegetation Types\",\n    caption = \"Data from landfire.gov\",\n    x = \"\",\n    y = \"Percent of landscape\") +\n  scale_x_discrete(limits = rev(evtname$EVT_NAME),\n                   labels = function(x) str_wrap(x, width = 18)) +\n  coord_flip() +\n  theme_bw(base_size = 14)\n\n\n\nevtChart\n```\n\n<br>\n\n## Existing Vegetation Cover\n\nThe Existing Vegetation Cover (EVC) map is a visual representation of EVC classifications across the subregion. The chart below the map provides a breakdown of each vegetation cover classification and their relative distribution across the forest.\n\n![](outputs/evc.jpg){width=\"100%\"} <br> <br>\n\n```{r evc chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\n\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Create \"type\" column based on conditions\nevcname <- evc_aoi_atts %>% \n  mutate(type = case_when(\n    VALUE %in% 11 ~ \"Open Water\",\n    VALUE %in% 12 ~ \"Snow / Ice\",\n    VALUE %in% 13:25 ~ \"Developed\",\n    VALUE %in% 31 ~ \"Barren\",\n    VALUE %in% 60:70 ~ \"Agriculture\",\n    VALUE %in% 32 ~ \"Quarries\",\n    VALUE %in% 100 ~ \"Sparse Vegetation\",\n    VALUE %in% 101:199 ~ \"Tree\",\n    VALUE %in% 201:299 ~ \"Shrub\",\n    VALUE %in% 301:399 ~ \"Herb\",\n    TRUE ~ \"Other\"\n  ))\n\n# Create reverse substr() function\nrevSubstr <- function(x, start, stop) {\n  x <- strsplit(x, \"\")\n  sapply(x, function(x) paste(rev(rev(x)[start:stop]), collapse = \"\"), USE.NAMES = FALSE)\n}\n\n# Create cover column based on 2nd and 3rd to last VALUEs of CLASSNAMES\n# If \"Other\" type, make 0\nevcname <- evcname %>% \n  mutate(cover = as.numeric(if_else(VALUE > 100,\n                                    revSubstr(evcname$CLASSNAMES, start = 2, stop = 3),\n                                    \"0\")))\n\n# Create bin breaks for grouping\nbreaks <- seq(0, 100, 10)\n\n# Create intervals for grouping and summarize\n# Also create factor order for \"type\"\nevcgroup <- evcname %>%\n  mutate(interval = cut(cover, breaks, include.lowest = TRUE, right = TRUE,\n                        labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60-69\", \n                                   \"70-79\", \"80-89\", \"90-100\")),\n         type = factor(type, levels = c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\", \"Snow / Ice\", \n                                        \"Developed\", \"Agriculture\", \"Sparse Vegetation\", \n                                        \"Barren\", \"Quarries\", \"Other\"))) %>%\n  group_by(type, interval) %>%\n  summarize(COUNT = sum(Freq),\n            acres = sum(ACRES),\n            rel_percent = sum(REL_PERCENT))\n\n# Add label and legend names based on condition\nevcgroup <- evcgroup %>% \n  mutate(label = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\"),\n                         paste0(type, \" Cover = \", interval, \"%\"), as.character(type)),\n         legend = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\"),\n                          type, as.factor(\"Other\")))\n\n# Turn current label order to factors\nevclabel.list <- evcgroup$label\nevcgroup <- evcgroup %>% \n  mutate(label = fct_rev(factor(label, evclabel.list)))\n\n# Join in custom cols column to color bars by specific label\nevc_group_cols <- read.csv(\"inputs/evc_group_acc.csv\")\nevcgroup <- left_join(evcgroup, evc_group_cols, by = \"label\")\n\n# Reorder labels\nevcgroup$label <- factor(evcgroup$label, levels = rev(evcgroup$label))\n\n# Filter out low relative percentages\nevcgroup <- evcgroup %>%\n  filter(rel_percent > 0.01)\n\n# Plot\nevcChart <- ggplot(data = evcgroup, aes(x = label, y = rel_percent, fill = colors)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Existing Vegetation Cover\",\n    caption = \"Data from landfire.gov\",\n    x = \"Amount of landscape\",\n    y = \"Most dominant lifeform\"\n  ) +\n  scale_fill_identity() +\n  coord_flip() +\n  theme_classic(base_size = 12) +\n  theme(legend.position = \"none\")\n\n# Display the plot\nprint(evcChart)\n\n```\n\n<br>\n\n## Existing Vegetation Height\n\nThe Existing Vegetation Height (EVH) map showcases EVH across the forest. The chart below the map provides the percentage of the landscape represented by each EVH height.\n\n![](outputs/evh.jpg){width=\"100%\"} <br>\n\n```{r evh chart, echo=FALSE, message=FALSE, warning=FALSE, fig.width=10, fig.height=10}\n\n\n# Create a new dataframe 'evhname' with additional columns 'type' and 'height_m'\nevhname <- evh_aoi_atts %>% \n  mutate(\n    type = case_when(\n      VALUE %in% 11 ~ \"Open Water\",\n      VALUE %in% 12 ~ \"Snow / Ice\",\n      VALUE %in% 13:25 ~ \"Developed\",\n      VALUE %in% 31 ~ \"Barren\",\n      VALUE %in% 60:70 ~ \"Agriculture\",\n      VALUE %in% 32 ~ \"Quarries\",\n      VALUE %in% 100 ~ \"Sparse Vegetation\",\n      VALUE %in% 101:199 ~ \"Tree\",\n      VALUE %in% 201:299 ~ \"Shrub\",\n      VALUE %in% 301:399 ~ \"Herb\",\n      TRUE ~ \"Other\"\n    ),\n    height_m = case_when(\n      type == \"Tree\" ~ VALUE - 100,\n      type == \"Shrub\" ~ (VALUE - 200) / 10,\n      type == \"Herb\" ~ (VALUE - 300) / 10,\n      TRUE ~ 0\n    ) %>% as.character() %>% as.numeric()\n  )\n\n# Define bin breaks for grouping\nbreaks <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100)\n\n# Create intervals for grouping and summarize data\nevhgroup <- evhname %>%\n  mutate(\n    interval = cut(height_m, breaks, include.lowest = TRUE, right = FALSE,\n                   labels = c(\"0\", \"0.1-0.2\", \"0.2-0.3\", \"0.3-0.4\", \"0.4-0.5\", \"0.5-0.6\", \"0.6-0.7\", \"0.7-0.8\", \"0.8-0.9\", \"0.9-1.0\", \"1-5\", \"5-10\", \"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\", \"35-40\", \"40-45\", \"45-50\", \"50-55\", \"55-60\", \"60-65\", \"65-70\", \"70-75\", \"75-80\", \"80-85\", \"85-90\", \"90-95\", \"95-100\")),\n    type = factor(type, levels = c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\", \"Snow / Ice\", \"Developed\", \"Agriculture\", \"Sparse Vegetation\", \"Barren\", \"Quarries\", \"Other\"))\n  ) %>%\n  group_by(type, interval) %>%\n  summarise(\n    COUNT = sum(Freq),\n    acres = sum(ACRES),\n    rel_percent = sum(REL_PERCENT)\n  )\n\n# Add label and legend names based on condition\nevhgroup <- evhgroup %>%\n  mutate(\n    label = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\"),\n                    paste0(type, \" Height = \", interval, \" m\"), as.character(type)),\n    legend = if_else(type %in% c(\"Tree\", \"Shrub\", \"Herb\", \"Open Water\"),\n                     type, as.factor(\"Other\"))\n  )\n\n# Turn current label order to factors\nevhlabel.list <- evhgroup$label\nevhgroup <- evhgroup %>%\n  mutate(label = fct_rev(factor(label, evhlabel.list)))\n\n# Join in custom columns to color bars by specific label\nevh_group_cols <- read.csv(\"inputs/evh_group_acc.csv\")\nevhgroup <- left_join(evhgroup, evh_group_cols, by = \"label\")\n\n# Reorder labels\nevhgroup$label <- factor(evhgroup$label, levels = rev(evhgroup$label))\n\n# Filter out rows with relative percentage less than 0.01\nevhgroup <- evhgroup %>%\n  filter(rel_percent > 0.01)\n\n# Plot the data\nevhChart <- ggplot(data = evhgroup, aes(x = label, y = rel_percent, fill = colors)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Existing Vegetation Height\",\n    subtitle = landscape_name,\n    caption = \"\\nData from landfire.gov.\",\n    x = \"\",\n    y = \"Percent of landscape\"\n  ) +\n  scale_fill_identity() +\n  coord_flip() +\n  theme_bw()\n\n# Display the plot\nevhChart\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"present.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"source","theme":{"dark":"darkly","light":"flatly"},"title":"Present: Current Ecosystem Conditions"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}